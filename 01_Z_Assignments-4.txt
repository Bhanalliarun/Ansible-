Your company has been increasing the deployment of small broacher-style websites for clients. The head of IT has decided that each client should have their own web servers for better 
client isolation and has tasked you with creating concept automation to quickly deploy web-nodes with simple static website content.

You must configure ansible control node and 2 test lab servers (node1 and node2) with the ansible user and key.

You must create an ansible inventory in /home/ansible/inventory containing a host group named web. The web group should contain node1 and node2.

Furthermore, you must design an Ansible playbook that will execute the following tasks on your configured inventory: install httpd, start and enable the httpd service, and 
install a simple website provided on a repo server. Create the playbook in /home/ansible/web.yml. The simple website may be accessed from http://repo.example.com/website.tgz.

Summary tasks list:

1. Create an inventory in /home/ansible/inventory containing a host group named web. The web group should contain node1 and node2.
2. Create a playbook in /home/ansible/web.yml.
3. Configure the playbook to install httpd on the web group.
4. Configure the playbook to start and enable the httpd service on the web group.
5. Configure the playbook to retrieve the website from http://repo.example.com/website.tgz on each server in the web group.
6. Configure the playbook to unarchive the website into /var/www/html on all servers in the web group.
7. Execute the playbook you created using the inventory you created to verify your work.

---------------------------------

1. Create an inventory in /home/ansible/inventory containing a host group named web. The web group should contain node1 and node2.

[ansible@ansible-server ~]$ pwd
/home/ansible
[ansible@ansible-server ~]$
[ansible@ansible-server ~]$ cat /home/ansible/inventory
[web]
node1
node2
[ansible@ansible-server ~]$
[ansible@ansible-server ~]$ ansible -m command -a "uptime" web
node2 | CHANGED | rc=0 >>
 06:04:16 up 8 min,  1 user,  load average: 0.06, 0.01, 0.00
node1 | CHANGED | rc=0 >>
 06:04:16 up 7 min,  1 user,  load average: 0.00, 0.00, 0.00
[ansible@ansible-server ~]$


2. Create a playbook in /home/ansible/web.yml       ## Just Created empty YAML file as per 2nd task  

[ansible@ansible-server ~]$ ls -l /home/ansible/web.yml
-rw-rw-r-- 1 ansible ansible 0 Jun 15 06:08 /home/ansible/web.yml
[ansible@ansible-server ~]$


3. Configure the playbook to install httpd on the web group.

[ansible@ansible-server ~]$ cat /home/ansible/web.yml
---
- name: Installing httpd
  hosts: web
  tasks:
    - name: Collecting public ipaddress
      command: curl http://169.254.169.254/latest/meta-data/public-ipv4
      register: output

    - set_fact: ipaddress="{{output.stdout}}"

    - name: Installing apache
      yum:
        name: httpd
        state: present

    - name: enabling httpd on runlevel
      command: systemctl enable httpd

    - name: Modify httpd.conf file
      replace:
        path: /etc/httpd/conf/httpd.conf
        regexp: '^#ServerName www.example.com'
        replace: 'ServerName {{ipaddress}}'
      notify: http restart

    - name: copying index.html file
      template:
        src: ./index.html
        dest: /var/www/html/
        owner: apache
        group: apache
        mode: 644
[ansible@ansible-server ~]$


4. Configure the playbook to start and enable the httpd service on the web group

    - name: enabling httpd on runlevel
      command: systemctl enable httpd
      notify: http restart

5. Configure the playbook to retrieve the website from http://repo.example.com/website.tgz on each server in the web group.

     - name: Retrieve the website
       get_url:
         url:  https://github.com/Bhanalliarun/website
         dest: /home/ansible
         mode: '0440'

6. Configure the playbook to unarchive the website into /var/www/html on all servers in the web group.

- name: copying index.html file
      template:
        src: ./index.html
        dest: /var/www/html/
        owner: apache
        group: apache
        mode: 644

7. Execute the playbook you created using the inventory you created to verify your work.


[ansible@ansible-server ~]$
[ansible@ansible-server ~]$ cat web.yml
---
- name: Installing apache
  hosts: web
  user: ansible
  become: true
  tasks:
    - name: installing apache
      yum: name=httpd state=present

    - name: Enabling apache at boot time
      systemd: name=httpd enabled=yes state=restarted

    - name: Gathering public ipaddress
      command: curl http://169.254.169.254/latest/meta-data/public-ipv4
      register: myoutput

    - set_fact: ipaddress= "{{myoutput.stdout}}"

    - name: Modify httpd.conf file
      replace:
        path: /etc/httpd/conf/httpd.conf
        regexp: '^#ServerName www.example.com'
        replace: 'ServerName {{ipaddress}}'
      notify: httpd restart

    - name: Copy index.html file
      template: src=/var/www/html/index.html dest=/var/www/html/
      notify: httpd restart

  handlers:
    - name: httpd restart
      service: name=httpd state=restarted
[ansible@ansible-server ~]$

[ansible@ansible-server ~]$ ansible-playbook web.yml -vv
ansible-playbook 2.9.9
  config file = /home/ansible/ansible.cfg
  configured module search path = [u'/home/ansible/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']
  ansible python module location = /usr/lib/python2.7/site-packages/ansible
  executable location = /usr/bin/ansible-playbook
  python version = 2.7.16 (default, Dec 12 2019, 23:58:22) [GCC 7.3.1 20180712 (Red Hat 7.3.1-6)]
Using /home/ansible/ansible.cfg as config file

PLAYBOOK: web.yml ****************************************************************************************************************************
1 plays in web.yml

PLAY [Installing apache] *********************************************************************************************************************

TASK [Gathering Facts] ***********************************************************************************************************************
task path: /home/ansible/web.yml:2
ok: [node2]
ok: [node1]
META: ran handlers

TASK [installing apache] *********************************************************************************************************************
task path: /home/ansible/web.yml:7
ok: [node1] => {"changed": false, "msg": "", "rc": 0, "results": ["httpd-2.4.43-1.amzn2.x86_64 providing httpd is already installed"]}
ok: [node2] => {"changed": false, "msg": "", "rc": 0, "results": ["httpd-2.4.43-1.amzn2.x86_64 providing httpd is already installed"]}

TASK [Enabling apache at boot time] **********************************************************************************************************
task path: /home/ansible/web.yml:10
changed: [node1] => {"changed": true, "enabled": true, "name": "httpd", "state": "started", "status": {"ActiveEnterTimestamp": "Mon 2020-06-15 07:37:44 UTC", "ActiveEnterTimestampMonotonic": "6077257403", "ActiveExitTimestamp": "Mon 2020-06-15 07:37:43 UTC", "ActiveExitTimestampMonotonic": "6076215163", "ActiveState": "active", "After": "nss-lookup.target network.target httpd-init.service remote-fs.target basic.target system.slice -.mount systemd-journald.socket tmp.mount", "AllowIsolate": "no", "AmbientCapabilities": "0", "AssertResult": "yes", "AssertTimestamp": "Mon 2020-06-15 07:37:44 UTC", "AssertTimestampMonotonic": "6077228913", "Before": "multi-user.target shutdown.target", "BlockIOAccounting": "no", "BlockIOWeight": "18446744073709551615", "CPUAccounting": "no", "CPUQuotaPerSecUSec": "infinity", "CPUSchedulingPolicy": "0", "CPUSchedulingPriority": "0", "CPUSchedulingResetOnFork": "no", "CPUShares": "18446744073709551615", "CanIsolate": "no", "CanReload": "yes", "CanStart": "yes", "CanStop": "yes", "CapabilityBoundingSet": "18446744073709551615", "ConditionResult": "yes", "ConditionTimestamp": "Mon 2020-06-15 07:37:44 UTC", "ConditionTimestampMonotonic": "6077228912", "Conflicts": "shutdown.target", "ControlGroup": "/system.slice/httpd.service", "ControlPID": "0", "DefaultDependencies": "yes", "Delegate": "no", "Description": "The Apache HTTP Server", "DevicePolicy": "auto", "Documentation": "man:httpd.service(8)", "Environment": "LANG=C", "ExecMainCode": "0", "ExecMainExitTimestampMonotonic": "0", "ExecMainPID": "11631", "ExecMainStartTimestamp": "Mon 2020-06-15 07:37:44 UTC", "ExecMainStartTimestampMonotonic": "6077229488", "ExecMainStatus": "0", "ExecReload": "{ path=/usr/sbin/httpd ; argv[]=/usr/sbin/httpd $OPTIONS -k graceful ; ignore_errors=no ; start_time=[n/a] ; stop_time=[n/a] ; pid=0 ; code=(null) ; status=0/0 }", "ExecStart": "{ path=/usr/sbin/httpd ; argv[]=/usr/sbin/httpd $OPTIONS -DFOREGROUND ; ignore_errors=no ; start_time=[Mon 2020-06-15 07:37:44 UTC] ; stop_time=[n/a] ; pid=11631 ; code=(null) ; status=0/0 }", "FailureAction": "none", "FileDescriptorStoreMax": "0", "FragmentPath": "/usr/lib/systemd/system/httpd.service", "GuessMainPID": "yes", "IOScheduling": "0", "Id": "httpd.service", "IgnoreOnIsolate": "no", "IgnoreOnSnapshot": "no", "IgnoreSIGPIPE": "yes", "InactiveEnterTimestamp": "Mon 2020-06-15 07:37:44 UTC", "InactiveEnterTimestampMonotonic": "6077228545", "InactiveExitTimestamp": "Mon 2020-06-15 07:37:44 UTC", "InactiveExitTimestampMonotonic": "6077229534", "JobTimeoutAction": "none", "JobTimeoutUSec": "0", "KillMode": "mixed", "KillSignal": "28", "LimitAS": "18446744073709551615", "LimitCORE": "18446744073709551615", "LimitCPU": "18446744073709551615", "LimitDATA": "18446744073709551615", "LimitFSIZE": "18446744073709551615", "LimitLOCKS": "18446744073709551615", "LimitMEMLOCK": "65536", "LimitMSGQUEUE": "819200", "LimitNICE": "0", "LimitNOFILE": "4096", "LimitNPROC": "3791", "LimitRSS": "18446744073709551615", "LimitRTPRIO": "0", "LimitRTTIME": "18446744073709551615", "LimitSIGPENDING": "3791", "LimitSTACK": "18446744073709551615", "LoadState": "loaded", "MainPID": "11631", "MemoryAccounting": "no", "MemoryCurrent": "18446744073709551615", "MemoryLimit": "18446744073709551615", "MountFlags": "0", "Names": "httpd.service", "NeedDaemonReload": "no", "Nice": "0", "NoNewPrivileges": "no", "NonBlocking": "no", "NotifyAccess": "main", "OOMScoreAdjust": "0", "OnFailureJobMode": "replace", "PermissionsStartOnly": "no", "PrivateDevices": "no", "PrivateNetwork": "no", "PrivateTmp": "yes", "ProtectHome": "no", "ProtectSystem": "no", "RefuseManualStart": "no", "RefuseManualStop": "no", "RemainAfterExit": "no", "Requires": "-.mount basic.target", "RequiresMountsFor": "/var/tmp", "Restart": "no", "RestartUSec": "100ms", "Result": "success", "RootDirectoryStartOnly": "no", "RuntimeDirectoryMode": "0755", "SameProcessGroup": "no", "SecureBits": "0", "SendSIGHUP": "no", "SendSIGKILL": "yes", "Slice": "system.slice", "StandardError": "inherit", "StandardInput": "null", "StandardOutput": "journal", "StartLimitAction": "none", "StartLimitBurst": "5", "StartLimitInterval": "10000000", "StartupBlockIOWeight": "18446744073709551615", "StartupCPUShares": "18446744073709551615", "StatusErrno": "0", "StatusText": "Total requests: 0; Idle/Busy workers 100/0;Requests/sec: 0; Bytes served/sec:   0 B/sec", "StopWhenUnneeded": "no", "SubState": "running", "SyslogLevelPrefix": "yes", "SyslogPriority": "30", "SystemCallErrorNumber": "0", "TTYReset": "no", "TTYVHangup": "no", "TTYVTDisallocate": "no", "TasksAccounting": "no", "TasksCurrent": "18446744073709551615", "TasksMax": "18446744073709551615", "TimeoutStartUSec": "1min 30s", "TimeoutStopUSec": "1min 30s", "TimerSlackNSec": "50000", "Transient": "no", "Type": "notify", "UMask": "0022", "UnitFilePreset": "disabled", "UnitFileState": "enabled", "WantedBy": "multi-user.target", "Wants": "httpd-init.service system.slice", "WatchdogTimestamp": "Mon 2020-06-15 07:37:44 UTC", "WatchdogTimestampMonotonic": "6077257378", "WatchdogUSec": "0"}}
changed: [node2] => {"changed": true, "enabled": true, "name": "httpd", "state": "started", "status": {"ActiveEnterTimestamp": "Mon 2020-06-15 07:37:44 UTC", "ActiveEnterTimestampMonotonic": "6123337304", "ActiveExitTimestamp": "Mon 2020-06-15 07:37:43 UTC", "ActiveExitTimestampMonotonic": "6122294363", "ActiveState": "active", "After": "-.mount tmp.mount basic.target httpd-init.service system.slice network.target nss-lookup.target remote-fs.target systemd-journald.socket", "AllowIsolate": "no", "AmbientCapabilities": "0", "AssertResult": "yes", "AssertTimestamp": "Mon 2020-06-15 07:37:44 UTC", "AssertTimestampMonotonic": "6123308475", "Before": "multi-user.target shutdown.target", "BlockIOAccounting": "no", "BlockIOWeight": "18446744073709551615", "CPUAccounting": "no", "CPUQuotaPerSecUSec": "infinity", "CPUSchedulingPolicy": "0", "CPUSchedulingPriority": "0", "CPUSchedulingResetOnFork": "no", "CPUShares": "18446744073709551615", "CanIsolate": "no", "CanReload": "yes", "CanStart": "yes", "CanStop": "yes", "CapabilityBoundingSet": "18446744073709551615", "ConditionResult": "yes", "ConditionTimestamp": "Mon 2020-06-15 07:37:44 UTC", "ConditionTimestampMonotonic": "6123308474", "Conflicts": "shutdown.target", "ControlGroup": "/system.slice/httpd.service", "ControlPID": "0", "DefaultDependencies": "yes", "Delegate": "no", "Description": "The Apache HTTP Server", "DevicePolicy": "auto", "Documentation": "man:httpd.service(8)", "Environment": "LANG=C", "ExecMainCode": "0", "ExecMainExitTimestampMonotonic": "0", "ExecMainPID": "12032", "ExecMainStartTimestamp": "Mon 2020-06-15 07:37:44 UTC", "ExecMainStartTimestampMonotonic": "6123309106", "ExecMainStatus": "0", "ExecReload": "{ path=/usr/sbin/httpd ; argv[]=/usr/sbin/httpd $OPTIONS -k graceful ; ignore_errors=no ; start_time=[n/a] ; stop_time=[n/a] ; pid=0 ; code=(null) ; status=0/0 }", "ExecStart": "{ path=/usr/sbin/httpd ; argv[]=/usr/sbin/httpd $OPTIONS -DFOREGROUND ; ignore_errors=no ; start_time=[Mon 2020-06-15 07:37:44 UTC] ; stop_time=[n/a] ; pid=12032 ; code=(null) ; status=0/0 }", "FailureAction": "none", "FileDescriptorStoreMax": "0", "FragmentPath": "/usr/lib/systemd/system/httpd.service", "GuessMainPID": "yes", "IOScheduling": "0", "Id": "httpd.service", "IgnoreOnIsolate": "no", "IgnoreOnSnapshot": "no", "IgnoreSIGPIPE": "yes", "InactiveEnterTimestamp": "Mon 2020-06-15 07:37:44 UTC", "InactiveEnterTimestampMonotonic": "6123308046", "InactiveExitTimestamp": "Mon 2020-06-15 07:37:44 UTC", "InactiveExitTimestampMonotonic": "6123309140", "JobTimeoutAction": "none", "JobTimeoutUSec": "0", "KillMode": "mixed", "KillSignal": "28", "LimitAS": "18446744073709551615", "LimitCORE": "18446744073709551615", "LimitCPU": "18446744073709551615", "LimitDATA": "18446744073709551615", "LimitFSIZE": "18446744073709551615", "LimitLOCKS": "18446744073709551615", "LimitMEMLOCK": "65536", "LimitMSGQUEUE": "819200", "LimitNICE": "0", "LimitNOFILE": "4096", "LimitNPROC": "3791", "LimitRSS": "18446744073709551615", "LimitRTPRIO": "0", "LimitRTTIME": "18446744073709551615", "LimitSIGPENDING": "3791", "LimitSTACK": "18446744073709551615", "LoadState": "loaded", "MainPID": "12032", "MemoryAccounting": "no", "MemoryCurrent": "18446744073709551615", "MemoryLimit": "18446744073709551615", "MountFlags": "0", "Names": "httpd.service", "NeedDaemonReload": "no", "Nice": "0", "NoNewPrivileges": "no", "NonBlocking": "no", "NotifyAccess": "main", "OOMScoreAdjust": "0", "OnFailureJobMode": "replace", "PermissionsStartOnly": "no", "PrivateDevices": "no", "PrivateNetwork": "no", "PrivateTmp": "yes", "ProtectHome": "no", "ProtectSystem": "no", "RefuseManualStart": "no", "RefuseManualStop": "no", "RemainAfterExit": "no", "Requires": "-.mount basic.target", "RequiresMountsFor": "/var/tmp", "Restart": "no", "RestartUSec": "100ms", "Result": "success", "RootDirectoryStartOnly": "no", "RuntimeDirectoryMode": "0755", "SameProcessGroup": "no", "SecureBits": "0", "SendSIGHUP": "no", "SendSIGKILL": "yes", "Slice": "system.slice", "StandardError": "inherit", "StandardInput": "null", "StandardOutput": "journal", "StartLimitAction": "none", "StartLimitBurst": "5", "StartLimitInterval": "10000000", "StartupBlockIOWeight": "18446744073709551615", "StartupCPUShares": "18446744073709551615", "StatusErrno": "0", "StatusText": "Total requests: 0; Idle/Busy workers 100/0;Requests/sec: 0; Bytes served/sec:   0 B/sec", "StopWhenUnneeded": "no", "SubState": "running", "SyslogLevelPrefix": "yes", "SyslogPriority": "30", "SystemCallErrorNumber": "0", "TTYReset": "no", "TTYVHangup": "no", "TTYVTDisallocate": "no", "TasksAccounting": "no", "TasksCurrent": "18446744073709551615", "TasksMax": "18446744073709551615", "TimeoutStartUSec": "1min 30s", "TimeoutStopUSec": "1min 30s", "TimerSlackNSec": "50000", "Transient": "no", "Type": "notify", "UMask": "0022", "UnitFilePreset": "disabled", "UnitFileState": "enabled", "WantedBy": "multi-user.target", "Wants": "httpd-init.service system.slice", "WatchdogTimestamp": "Mon 2020-06-15 07:37:44 UTC", "WatchdogTimestampMonotonic": "6123337274", "WatchdogUSec": "0"}}

TASK [Gathering public ipaddress] ************************************************************************************************************
task path: /home/ansible/web.yml:13
[WARNING]: Consider using the get_url or uri module rather than running 'curl'.  If you need to use command because get_url or uri is
insufficient you can add 'warn: false' to this command task or set 'command_warnings=False' in ansible.cfg to get rid of this message.
changed: [node1] => {"changed": true, "cmd": ["curl", "http://169.254.169.254/latest/meta-data/public-ipv4"], "delta": "0:00:00.011714", "end": "2020-06-15 07:39:08.012130", "rc": 0, "start": "2020-06-15 07:39:08.000416", "stderr": "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    14  100    14    0     0   4666      0 --:--:-- --:--:-- --:--:--  4666", "stderr_lines": ["  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current", "                                 Dload  Upload   Total   Spent    Left  Speed", "", "  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0", "100    14  100    14    0     0   4666      0 --:--:-- --:--:-- --:--:--  4666"], "stdout": "18.206.148.187", "stdout_lines": ["18.206.148.187"]}
changed: [node2] => {"changed": true, "cmd": ["curl", "http://169.254.169.254/latest/meta-data/public-ipv4"], "delta": "0:00:00.011984", "end": "2020-06-15 07:39:08.012383", "rc": 0, "start": "2020-06-15 07:39:08.000399", "stderr": "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100    12  100    12    0     0   4000      0 --:--:-- --:--:-- --:--:--  4000", "stderr_lines": ["  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current", "                                 Dload  Upload   Total   Spent    Left  Speed", "", "  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0", "100    12  100    12    0     0   4000      0 --:--:-- --:--:-- --:--:--  4000"], "stdout": "18.213.218.3", "stdout_lines": ["18.213.218.3"]}

TASK [set_fact] ******************************************************************************************************************************
task path: /home/ansible/web.yml:17
ok: [node1] => {"ansible_facts": {"_raw_params": "\"18.206.148.187\"", "ipaddress": ""}, "changed": false}
ok: [node2] => {"ansible_facts": {"_raw_params": "\"18.213.218.3\"", "ipaddress": ""}, "changed": false}

TASK [Modify httpd.conf file] ****************************************************************************************************************
task path: /home/ansible/web.yml:19
ok: [node2] => {"changed": false, "msg": ""}
ok: [node1] => {"changed": false, "msg": ""}

TASK [Copy index.html file] ******************************************************************************************************************
task path: /home/ansible/web.yml:26
ok: [node2] => {"changed": false, "checksum": "7a1d8e673a3bdc8cbcd6cb4b061fc55ba13b79f7", "dest": "/var/www/html/index.html", "gid": 0, "group": "root", "mode": "0644", "owner": "root", "path": "/var/www/html/index.html", "size": 31, "state": "file", "uid": 0}
ok: [node1] => {"changed": false, "checksum": "7a1d8e673a3bdc8cbcd6cb4b061fc55ba13b79f7", "dest": "/var/www/html/index.html", "gid": 0, "group": "root", "mode": "0644", "owner": "root", "path": "/var/www/html/index.html", "size": 31, "state": "file", "uid": 0}
META: ran handlers
META: ran handlers

PLAY RECAP ***********************************************************************************************************************************
node1                      : ok=7    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
node2                      : ok=7    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0

[ansible@ansible-server ~]$ curl http://18.206.148.187
WelCome to Knowledge Center !!
[ansible@ansible-server ~]$
[ansible@ansible-server ~]$ curl http://18.213.218.3
WelCome to Knowledge Center !!
[ansible@ansible-server ~]$