Learning Objectives:-
Install Ansible on the control host.
Create an `ansible` user on both the control host and workstation host being sure to set a password you can remember.
Configure a pre-shared key for Ansible that allows the user to log in from `control` to `workstation` without a password.
Configure the Ansible user on the workstation host so that Ansible may sudo without a password.
Create a simple inventory in `/home/ansible/inventory` consisting of only the `workstation` host.
Write an Ansible playbook in `/home/ansible/git-setup.yml` on the control node that installs `git` on `workstation` then execute the playbook.


Additional Information:-
You have been tasked with putting together a presentation to demonstrate how Ansible may be used to install software on remote hosts automatically. Before the demo, you will need to configure your test systems. You have been provided two hosts called control and workstation(Please create 2 Unix/Linux machine for the same). You will need to configure the ansible user on workstation to have sudo access without a password to the automated software installed via Ansible. You must also configure the control host as your Ansible control server by installing Ansible on it as well as configuring the Ansible user with a pre-shared key to login to the workstation host as the ansible user.

Once the basic configuration is complete, you will need to create a simple inventory in /home/ansible/inventory on the control server containing the workstation host. Afterward, you will write a simple playbook in /home/ansbile/git-setup.yml on the control host that installs git on the workstation host. You will need to make sure the playbook works by running it from the control server.


Summary tasks list:-

Install Ansible on the control host.

Create an ansible user on both the control host and workstation host.

Configure a pre-shared key for Ansible that allows the user to log in from control to workstation without a password.

Configure the Ansible user on the workstation host so that Ansible may sudo without a password.

Create a simple inventory in /home/ansible/inventory consisting of only the workstation host.

Write and execute an Ansible playbook in /home/ansible/git-setup.yml on the control node that installs git on the workstation host.

===============

Soulution ::

Ansible installed in Control host ( Named has Ansible-Server )

[ansible@Ansible-Server ~]$ ansible --version
ansible 2.9.9
  config file = /etc/ansible/ansible.cfg
  configured module search path = [u'/home/ansible/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']
  ansible python module location = /usr/lib/python2.7/site-packages/ansible
  executable location = /usr/bin/ansible
  python version = 2.7.16 (default, Dec 12 2019, 23:58:22) [GCC 7.3.1 20180712 (Red Hat 7.3.1-6)]
[ansible@Ansible-Server ~]$

Control host Ansible user ID :-

[ansible@Ansible-Server ~]$ id ansible
uid=1001(ansible) gid=1001(ansible) groups=1001(ansible)
[ansible@Ansible-Server ~]$


Ansible id created in Workstation :-

[ansible@workstation ~]$ id ansible
uid=1001(ansible) gid=1001(ansible) groups=1001(ansible)
[ansible@workstation ~]$


[ansible@Ansible-Server .ssh]$
[ansible@Ansible-Server .ssh]$ ssh ansible@10.10.10.229
Last login: Sat Jun  11 10:48:13 2020

       __|  __|_  )
       _|  (     /   Amazon Linux 2 AMI
      ___|\___|___|

https://aws.amazon.com/amazon-linux-2/
4 package(s) needed for security, out of 8 available
Run "sudo yum update" to apply all updates.
[ansible@workstation ~]$


[ansible@Ansible-Server ~]$
[ansible@Ansible-Server ~]$ cat hosts
#10.10.10.229
#52.205.146.132
#10.10.10.39

workstation
[ansible@Ansible-Server ~]$ cat inventory
workstation
[ansible@Ansible-Server ~]$ cat ansible.cfg
[defaults]
inventory      = /home/ansible/hosts
interpreter_python = /usr/bin/python
[ansible@Ansible-Server ~]$ ansible -m command -a "uptime" all   -------- tested with uptime command for connectivity
workstation | CHANGED | rc=0 >>
 11:47:25 up  1:16,  2 users,  load average: 0.00, 0.00, 0.00
[ansible@Ansible-Server ~]$



------------------------- PlayBook for Git Install --------------------


[ansible@Ansible-Server ~]$ cat git-setup.yml
---
- name: Install Git
  hosts: workstation
  user: ansible
  become: true
  tasks:
    - name: installing git
      yum:
        name: git
        state: present
        update_cache: yes
        #- name: enabling git on runlevel
      #command: systemctl enable git
[ansible@Ansible-Server ~]$


------------ Playbook Runtime output ------------

[ansible@Ansible-Server ~]$ ansible-playbook git-setup.yml

PLAY [Install Git] ***************************************************************************************************************************

TASK [Gathering Facts] ***********************************************************************************************************************
ok: [workstation]

TASK [installing git] ************************************************************************************************************************
ok: [workstation]

PLAY RECAP ***********************************************************************************************************************************
workstation                : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0

[ansible@Ansible-Server ~]$


==== Before Run git-install Playbook on Workstation ===========

[root@workstation ~]# yum list git
Loaded plugins: extras_suggestions, langpacks, priorities, update-motd
Available Packages
git.x86_64                                                    2.23.3-1.amzn2.0.1                                                    amzn2-core
[root@workstation ~]#
[root@workstation ~]#
[root@workstation ~]# rpm -qa |grep -i git
screen-4.1.0-0.25.20120314git3c2946.amzn2.x86_64
crontabs-1.11-6.20121102git.amzn2.noarch
lm_sensors-libs-3.4.0-8.20160601gitf9185e5.amzn2.x86_64
python-pillow-2.0.0-20.gitd1c6db8.amzn2.0.1.x86_64
net-tools-2.0-0.22.20131004git.amzn2.0.2.x86_64
[root@workstation ~]#


=========== After Playbook Run On Workstation output ===========-======

[root@workstation ~]# yum list git
Loaded plugins: extras_suggestions, langpacks, priorities, update-motd
Installed Packages
git.x86_64                                                   2.23.3-1.amzn2.0.1                                                    @amzn2-core
[root@workstation ~]#


